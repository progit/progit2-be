[[_first_time]]
=== Першапачатковая настройка Git

Цяпер, калі Git усталяваны ў вашай сістэме, самы час наладзіць сераду для працы з Git пад сябе.
Гэта трэба зрабіць толькі адзін раз -- пры абнаўленні версіі Git налады захаваюцца.
Але, пры неабходнасці, вы можаце памяняць іх у любы момант, выканаўшы тыя ж каманды зноў.

У склад Git уваходзіць утыліта `git config`, якая дазваляе праглядаць і наладжваць параметры, якія кантралююць усе аспекты працы Git, а таксама яго знешні выгляд.
(((каманды git, config)))
Гэтыя параметры могуць быць захаваны ў трох месцах:

1. Файл `[path]/etc/gitconfig` змяшчае значэння, агульныя для ўсіх карыстальнікаў сістэмы і для ўсіх іх рэпазітароў.
  Если при запуске `git config` указать параметр `--system`, то параметры будут читаться и сохраняться именно в этот файл.
  Вам спатрэбяцца правы суперкарыстальника для ўнясення змяненняў у яго, бо гэты файл з'яўляецца сістэмным.
2. Файл `~/.gitconfig` або `~/.config/git/config` захоўвае налады канкрэтнага карыстальніка.
  Гэты файл выкарыстоўваецца пры ўказанні параметра `--global` і прымяняецца да _ўсіх_ рэпазітароў, з якімі вы працуеце ў бягучай сістэме.
3. Файл `config` у каталогу Git (`.git/config`) рэпазітара, які вы выкарыстоўваеце ў дадзены момант, захоўвае налады канкрэтнага рэпазітара.
  Вы можаце прымусіць Git чытаць і пісаць у гэты файл з дапамогай параметру --local, але на самой справе гэта значэнне па змаўчанні.
  Нядзіўна, што вам трэба знаходзіцца дзесьці ў рэпазітары Git, каб гэтая опцыя працавала правільна.

Налады на кожным наступным узроўні падмяняюць налады з папярэдніх узроўняў, гэта значыць, што значэння ў `.git/config` перакрываюць адпаведныя значэння ў `[path]/etc/gitconfig`.

У сістэмах сямейства Windows Git шукае файл `.gitconfig` ў каталогу `$HOME` ( `C:\Users\$USER` для большасці карыстальнікаў).
Акрамя таго, Git шукае файл `[path]/etc/gitconfig`, але ўжо адносна каранёвага каталога MSys, які знаходзіцца там, куды вы вырашылі ўсталяваць Git пры запуску ўсталёўніка.

Калі вы выкарыстоўваеце Git для Windows версіі 2.х або навей, то гэтак жа апрацоўваецца файл канфігурацыі ўзроўню сістэмы, які мае шлях `C:\Documents and Settings\All Users\Application Data\Git\config` у Windows XP або `C:\ProgramData\Git\config` у Windows Vista і навей.
Гэты файл можа быць зьменены толькі камандай `git config -f <file>`, запушчанай з правамі адміністратара.

Каб паглядзець усе ўстаноўленыя налады і даведацца дзе менавіта яны зададзены, выкарыстоўвайце каманду:

[source,console]
----
$ git config --list --show-origin
----

==== Ваша Асоба

Першае, што вам варта зрабіць пасля ўстаноўкі Git -- пазначыць ваша імя і адрас электроннай пошты.
Гэта важна, таму што кожны каміт у Git змяшчае гэтую інфармацыю, і яна ўключана ў каміты, якія вы перадаяцё, і не можа быць далей зменена:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Зноў жа, калі выкарыстоўваецца опцыя `--global`, то гэтыя налады досыць зрабіць толькі адзін раз, паколькі ў гэтым выпадку Git будзе выкарыстоўваць гэтыя налады для ўсяго, што вы робіце ў гэтай сістэме.
Калі для нейкіх асобных праектаў вы хочаце вызначыць іншую назву ці электронную пошту, можна выканаць гэтую ж каманду без параметра `--global` у каталогу з патрэбным праектам.

Многія GUI-інструменты прапануюць зрабіць гэта пры першым запуску.

[[_editor]]
==== Выбар рэактара

Цяпер, калі вы задалі сваё імя, самы час выбраць тэкставы рэдактар, які будзе выкарыстоўвацца калі патрэбна набраць паведамленне ў Git.
Па змаўчанні, Git выкарыстоўвае стандартны рэдактар вашай сістэмы, якім звычайна з'яўляецца Vim.
Калі вы хочаце карыстацца іншым тэкставым рэдактарам, напрыклад, Emacs, можна зрабіць наступнае: 

[source,console]
----
$ git config --global core.editor emacs
----

У сістэме Windows варта паказваць поўны шлях да выконваемага файла пры ўсталёўцы іншага тэкставага рэдактара па змаўчанні.
Шляхі могуць адрознівацца ў залежнасці ад таго, як працуе ўсталёўнік.

У выпадку з Notepad++, папулярным рэдактарам, хутчэй за ўсё вы захочаце ўсталяваць 32-бітную версію, так як 64-бітная версія яшчэ не падтрымлівае ўсе ўбудовы.
Калі ў вас 32-бітная Windows або 64-бітны рэдактар з 64-бітнай сістэмай, то выканайце наступнае: 

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
----

[NOTE]
====
Vim, Emacs і Notepad++ -- папулярныя тэкставыя рэдактары, якія часта выкарыстоўваюцца распрацоўшчыкамі як у Unix-падобных сістэмах, такіх як Linux і Mac, так і ў Windows.
Калі вы карыстаецеся іншым рэдактарам або яго 32-бітнай версіяй, то звярніцеся да падзелу << C-git-commands#r_core_editor >> за дадатковымі інструкцыямі як выкарыстоўваць яго сумесна з Git. 
====

[WARNING]
====
У выпадку, калі вы не ўсталявалі свой рэдактар і не знаёмы з Vim ці Emacs, вы можаце патрапіць у цяжкае становішча, калі які-небудзь з іх будзе запушчаны.
Напрыклад, у Windows можа адбыцца заўчаснае перапыненне каманды Git пры спробе выкліку рэдактара.
====

==== Настройка ветки по умолчанию

Калі вы ініцыялізуеце рэпазітар камандай `git init`, Git стварае галіну з імем _master_ па змаўчанні.
Пачынаючы з версіі 2.28, вы можаце задаць іншае імя для стварэння галіны па змаўчанні.

Напрыклад, каб усталяваць імя _main_ для вашай галіны па змаўчанні, запусціце наступную каманду:

[source,console]
----
$ git config --global init.defaultBranch main
----

==== Проверка настроек

Калі вы хочаце праверыць свае налады канфігурацыі, вы можаце выкарыстоўваць каманду `git config --list`, каб пералічыць усе налады, якія Git можа знайсці ў бягучым мейсцы:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Некаторыя ключы (назвы) налад могуць быць паказаны некалькі разоў, таму што Git чытае налады з розных файлаў (напрыклад, з `/etc/gitconfig` і `~/.gitconfig`).
У такім выпадку Git выкарыстоўвае апошняе значэнне для кожнага ключа.

Таксама вы можаце праверыць значэнне канкрэтнага ключа, выканаўшы `git config <key>`:(((команды git, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTE]
====
Git чытае значэнні налад з некалькіх файлаў, таму магчыма сітуацыя калі Git выкарыстае не тое значэнне што вы чакалі.
У такім выпадку вы можаце спытаць Git аб _origin_ гэтага значэння.
Git выведзе імя файла, з якога значэнне для налады было ўзята апошнім:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
